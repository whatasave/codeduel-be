definitions:
  api.Error:
    properties:
      error:
        type: string
    type: object
  types.Challenge:
    properties:
      content:
        description: markdown maybe the link to the file
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      owner_id:
        description: User.ID
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  types.ChallengeListResponse:
    properties:
      challenges:
        items:
          $ref: '#/definitions/types.ChallengeResponse'
        type: array
    type: object
  types.ChallengeResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      owner_id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  types.CreateChallengeRequest:
    properties:
      content:
        type: string
      description:
        type: string
      title:
        type: string
    type: object
  types.CreateLobbyRequest:
    properties:
      challenge_id:
        type: integer
      lobby_id:
        type: string
      owner_id:
        type: integer
      settings:
        properties:
          allowed_languages:
            items:
              type: string
            type: array
          game_duration:
            type: integer
          max_players:
            type: integer
          mode:
            type: string
        type: object
      users_id:
        items:
          type: integer
        type: array
    type: object
  types.CreateUserRequest:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  types.Lobby:
    properties:
      allowed_languages:
        items:
          type: string
        type: array
      challenge_id:
        type: integer
      created_at:
        type: string
      ended:
        type: boolean
      game_duration:
        type: integer
      id:
        type: integer
      max_players:
        type: integer
      mode:
        description: Settings
        type: string
      owner_id:
        type: integer
      updated_at:
        type: string
      users_id:
        items:
          type: integer
        type: array
      uuid:
        type: string
    type: object
  types.LobbyResults:
    properties:
      lobby:
        $ref: '#/definitions/types.Lobby'
      results:
        items:
          $ref: '#/definitions/types.LobbyUserResult'
        type: array
    type: object
  types.LobbyUserResult:
    properties:
      code:
        type: string
      created_at:
        type: string
      id:
        type: integer
      language:
        type: string
      lobby_id:
        type: integer
      show_code:
        type: boolean
      submitted_at:
        type: string
      tests_passed:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  types.LobbyUserSubmissionRequest:
    properties:
      code:
        type: string
      date:
        type: string
      language:
        type: string
      tests_passed:
        type: integer
      user_id:
        type: integer
    type: object
  types.ShareLobbyCodeRequest:
    properties:
      share_code:
        type: boolean
    type: object
  types.UpdateChallengeRequest:
    properties:
      content:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  types.User:
    properties:
      avatar:
        type: string
      background_img:
        type: string
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  types.UserRequestHeader:
    properties:
      avatar:
        type: string
      email:
        type: string
      expires_at:
        type: integer
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  types.UserResponse:
    properties:
      avatar:
        type: string
      background_img:
        type: string
      bio:
        type: string
      created_at:
        type: string
      name:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  types.VerifyToken:
    properties:
      token:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost
info:
  contact:
    email: support@codeduel
    name: API Support
    url: http://www.swagger.io/support
  description: Backend API for CodeDuel
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: CodeDuel API
  version: "1.0"
paths:
  /access_token:
    get:
      consumes:
      - application/json
      description: Access token endpoint, it will return a new access token if the
        refresh token is valid
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Access Token
      tags:
      - auth
  /health:
    get:
      consumes:
      - application/json
      description: Health check endpoint
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
      tags:
      - root
  /lobby/{lobbyUniqueId}/endgame:
    patch:
      description: Update lobby
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Update lobby
      tags:
      - lobby
  /lobby/{lobbyUniqueId}/submission:
    patch:
      description: Update lobby
      parameters:
      - description: Update Lobby Request
        in: body
        name: lobby
        required: true
        schema:
          $ref: '#/definitions/types.LobbyUserSubmissionRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Update lobby
      tags:
      - lobby
  /logout:
    get:
      consumes:
      - application/json
      description: Logout endpoint, it will delete the refresh token cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Logout
      tags:
      - auth
  /v1:
    get:
      consumes:
      - application/json
      description: Root endpoint
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Root
      tags:
      - root
  /v1/challenge:
    get:
      consumes:
      - application/json
      description: Get all challenges
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ChallengeListResponse'
      summary: Get all challenges
      tags:
      - challenge
    post:
      consumes:
      - application/json
      description: Create a new challenge
      parameters:
      - description: Create Challenge Request
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/types.CreateChallengeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ChallengeResponse'
      summary: Create a new challenge
      tags:
      - challenge
  /v1/challenge/{id}:
    delete:
      consumes:
      - application/json
      description: Delete challenge by ID
      parameters:
      - description: Challenge ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete challenge by ID
      tags:
      - challenge
    get:
      consumes:
      - application/json
      description: Get challenge by ID
      parameters:
      - description: Challenge ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Challenge'
      summary: Get challenge by ID
      tags:
      - challenge
    put:
      consumes:
      - application/json
      description: Update challenge by ID
      parameters:
      - description: Challenge ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Challenge Request
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/types.UpdateChallengeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Update challenge by ID
      tags:
      - challenge
  /v1/github/auth:
    get:
      description: Endpoint to log in with GitHub OAuth, it will redirect to GitHub
        OAuth page to authenticate
      responses:
        "302":
          description: Found
      summary: Login with GitHub
      tags:
      - auth
  /v1/github/auth/callback:
    get:
      description: Endpoint to handle GitHub OAuth callback, it will exchange code
        for access token and get user data from GitHub, then it will register a new
        user or login the user if it already exists. It will set a cookie with JWT
        token and redirect to frontend with the JWT token as a query parameter.
      responses:
        "302":
          description: Found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: GitHub Auth Callback
      tags:
      - auth
  /v1/lobby:
    post:
      consumes:
      - application/json
      description: Create a new lobby and add it to the database
      parameters:
      - description: Create Lobby Request
        in: body
        name: lobby
        required: true
        schema:
          $ref: '#/definitions/types.CreateLobbyRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a new lobby
      tags:
      - lobby
  /v1/lobby/results/{lobbyUniqueId}:
    get:
      description: Get lobby results
      parameters:
      - description: Lobby unique id
        in: path
        name: lobbyUniqueId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.LobbyResults'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get lobby results
      tags:
      - lobby
  /v1/user:
    get:
      description: Get all users from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get all users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create a new user in the database
      parameters:
      - description: Create User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create a new user
      tags:
      - user
  /v1/user/{username}:
    delete:
      consumes:
      - application/json
      description: Delete user by username from the database
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Delete user by username
      tags:
      - user
    get:
      description: Get user by username from the database
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get user by username
      tags:
      - user
  /v1/user/profile:
    get:
      description: Get user profile when authenticated with JWT in the cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.UserRequestHeader'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - CookieAuth: []
      summary: Get Profile
      tags:
      - user
  /validateToken:
    post:
      consumes:
      - application/json
      description: Validate if the user JWT token is valid, and return user data.
        Used from other services to validate user token
      parameters:
      - description: Service token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/types.VerifyToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Validate JWT Token
      tags:
      - user
schemes:
- http
securityDefinitions:
  BasicAuth:
    type: basic
  JWT:
    description: Authorization token
    in: header
    name: token
    type: apiKey
swagger: "2.0"
